#ifndef __BLUEFRUIT__H__
#define __BLUEFRUIT__H__

#define BLUEFRUIT_SPI_CHIP_SELECT 1

#define BLUEFRUIT_SLAVE_NOT_READY 		0xFE
#define BLUEFRUIT_SLAVE_READ_OVERFLOW 	0xFF

#define SDEP_COMMAND_HEADER_SIZE 4

enum sdep_message_type
{
	SDEP_COMMAND 	= 0x10,
	SDEP_RESPONSE 	= 0x20,
	SDEP_ALERT 		= 0x40,
	SDEP_ERROR 		= 0x80
};

enum sdep_command_type
{
	SDEP_CMDTYPE_INITIALIZE = 0xBEEF,
	SDEP_CMDTYPE_AT_WRAPPER = 0x0A00,
	SDEP_CMDTYPE_BLE_UARTTX = 0x0A01,
	SDEP_CMDTYPE_BLE_UARTRX = 0x0A02	
};

enum bluefruit_command
{
	BLUEFRUIT_COMMAND_AT,
	BLUEFRUIT_COMMAND_ATI,
	BLUEFRUIT_COMMAND_ATZ,
	BLUEFRUIT_COMMAND_AT_HELP,
	//General purpose
	BLUEFRUIT_COMMAND_AT_FACTORYRESET,
	BLUEFRUIT_COMMAND_AT_NVMWRITE,
	BLUEFRUIT_COMMAND_AT_NVMREAD,
	//hardware
	BLUEFRUIT_COMMAND_AT_BAUDRATE,
	BLUEFRUIT_COMMAND_AT_HWADC,
	BLUEFRUIT_COMMAND_AT_HWGETDIETEMP,
	BLUEFRUIT_COMMAND_AT_HWGPIO,
	BLUEFRUIT_COMMAND_AT_HWGPIOMODE,
	BLUEFRUIT_COMMAND_AT_HWI2CSCAN,
	BLUEFRUIT_COMMAND_AT_HWVBAT,
	BLUEFRUIT_COMMAND_AT_HWRANDOM,
	BLUEFRUIT_COMMAND_AT_HWMODELED,
	BLUEFRUIT_COMMAND_AT_UARTFLOW,
	//BLE generic
	BLUEFRUIT_COMMAND_AT_BLEPOWERLEVEL,
	BLUEFRUIT_COMMAND_AT_BLEGETADDRTYPE,
	BLUEFRUIT_COMMAND_AT_BLEGETADDR,
	BLUEFRUIT_COMMAND_AT_BLEGETPEERADDR,
	BLUEFRUIT_COMMAND_AT_BLEGETRSSI,
	//BLE services
	BLUEFRUIT_COMMAND_AT_BLEUARTTX,
	BLUEFRUIT_COMMAND_AT_BLEUARTX,
	BLUEFRUIT_COMMAND_AT_BLEUARTFIFO,
	BLUEFRUIT_COMMAND_AT_BLEKEYBOARDEN,
	BLUEFRUIT_COMMAND_AT_BLEKEYBOARD,
	BLUEFRUIT_COMMAND_AT_BLEKEYBOARDCODE,
	BLUEFRUIT_COMMAND_AT_BLEHIDEN,
	BLUEFRUIT_COMMAND_AT_BLEHIDMOUSEMOVE,
	BLUEFRUIT_COMMAND_AT_BLEHIDMOUSEBUTTON,
	BLUEFRUIT_COMMAND_AT_BLEHIDCONTROLKEY,
	BLUEFRUIT_COMMAND_AT_BLEHIDGAMEPAD,
	BLUEFRUIT_COMMAND_AT_BLEMIDIEN,
	BLUEFRUIT_COMMAND_AT_BLEMIDIRX,
	BLUEFRUIT_COMMAND_AT_BLEMIDITX,
	BLUEFRUIT_COMMAND_AT_BLEBATTEN,
	BLUEFRUIT_COMMAND_AT_BLEBATTVAL
};



int bluefruit_init(void);
int send_at_command(char* at_cmd);
int get_at_cmd_response();
int send_uart_message(char* msg);

#endif